from src.nlp_analyzer import NLPAnalyzer

def demonstrate_problematic_cases():
    """Demonstra casos problem√°ticos espec√≠ficos para PLN"""
    
    analyzer = NLPAnalyzer()
    
    print("\n=== CASOS PROBLEM√ÅTICOS PARA PLN ===\n")
    
    # Caso 1: Hom√≥fonos
    print("üìå CASO 1: HOM√ìFONOS")
    print("Problema: Palavras que soam igual mas t√™m significados diferentes")
    
    test_cases_homophones = [
        "i want to go to the store",  # 'to' pode ser 'too' ou 'two'
        "there house is over their",  # 'there' vs 'their'
        "its a beautiful day",        # 'its' vs "it's"
        "i can hear you from here"    # 'hear' vs 'here'
    ]
    
    for text in test_cases_homophones:
        print(f"\n   Texto: '{text}'")
        problems = analyzer.identify_problems(text)
        for problem in problems:
            if "Hom√≥fonos" in problem:
                print(f"   ‚ö†Ô∏è  {problem}")
        print(f"   üí° Solu√ß√£o: Usar contexto sem√¢ntico e modelos de linguagem")
    
    # Caso 2: Aus√™ncia de pontua√ß√£o e hesita√ß√µes
    print("\n" + "="*60)
    print("üìå CASO 2: FALA NATURAL SEM ESTRUTURA")
    print("Problema: Hesita√ß√µes, repeti√ß√µes e falta de pontua√ß√£o")
    
    test_cases_speech = [
        "um i think that we should uh maybe go to the store you know",
        "the the meeting is tomorrow and and we need to prepare",
        "basically like we need to finish this project before the deadline"
    ]
    
    for text in test_cases_speech:
        print(f"\n   Texto: '{text}'")
        problems = analyzer.identify_problems(text)
        for problem in problems:
            print(f"   ‚ö†Ô∏è  {problem}")
        print(f"   üí° Solu√ß√£o: Pr√©-processamento para remo√ß√£o de hesita√ß√µes")
    
    # Caso 3: An√°lise comparativa
    print("\n" + "="*60)
    print("üìå AN√ÅLISE COMPARATIVA")
    
    original_speech = "um i think that we should go to the store and buy to apples"
    cleaned_text = "I think that we should go to the store and buy two apples."
    
    print(f"\n   Fala transcrita: '{original_speech}'")
    problems_original = analyzer.identify_problems(original_speech)
    print("   Problemas encontrados:")
    for problem in problems_original:
        print(f"     - {problem}")
    
    print(f"\n   Texto limpo: '{cleaned_text}'")
    problems_cleaned = analyzer.identify_problems(cleaned_text)
    if problems_cleaned:
        print("   Problemas encontrados:")
        for problem in problems_cleaned:
            print(f"     - {problem}")
    else:
        print("   ‚úÖ Nenhum problema identificado")
    
    print("\n" + "="*60)
    print("üìã RESUMO DOS PRINCIPAIS PROBLEMAS PARA PLN:")
    print("1. Hom√≥fonos causam ambiguidade sem√¢ntica")
    print("2. Hesita√ß√µes adicionam ru√≠do aos dados")
    print("3. Falta de pontua√ß√£o dificulta an√°lise sint√°tica")
    print("4. Repeti√ß√µes criam redund√¢ncia desnecess√°ria")
    print("5. Contra√ß√µes precisam ser expandidas")
    print("6. N√∫meros vs palavras causam confus√£o")

if __name__ == "__main__":
    demonstrate_problematic_cases()